#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#ifndef KEYMAP_DRAWER

#include "keys_es_latin_american.h"

#endif

/* #include "keys_es_latin_american.h" */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;       // 0
    time-to-max-speed-ms = <0>;        // 300
    delay-ms = <0>;                    // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
};

&mt {
    tapping-term-ms = <150>;
    hold-while-undecided;
};

/ {
    behaviors {
        bt_encoder: bt_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&bt BT_NXT>, <&bt BT_PRV>;

            tap-ms = <20>;
        };

        hue_encoder: hue_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
        };

        sat_encoder: sat_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_SAI>, <&rgb_ug RGB_SAD>;
        };

        bright_encoder: bright_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <30>;
        };

        as_ht: autoshift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        hrm: home_row {
            compatible = "zmk,behavior-hold-tap";
            label = "home_row";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        shortcut: shortcut {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&oneshot>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <350>;
            label = "Oneshot shortcut";
        };

        lt_hold: lt_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "&mo(hold)";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            require-prior-idle-ms = <1>;
        };

        tilde_kp: tilde_kp {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&tilde>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <350>;
            label = "TILDE_KP";
        };

        kp_bt: kp_bt {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_BT";
            bindings = <&bt_sel>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        Back_Del: Back_Del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACK_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        tilde_dieresis: tilde_dieresis {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_DIERESIS";
            #binding-cells = <0>;
            bindings = <&kp ES_ACUTE>, <&kp ES_UMLAUT>;

            mods = <(MOD_LCTL|MOD_LALT)>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        oneshot: one_shot {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &rgb_ug RGB_TOG &rgb_ug RGB_EFF>,
                <&macro_wait_time 50>,
                <&rgb_ug RGB_EFR &rgb_ug RGB_TOG>,
                <&macro_release>;

            label = "one_shot";
        };

        tilde: tilde_a {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&tilde_dieresis>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "TILDE_A";
        };

        bt_sel: bt_sel {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to2 &bt BT_SEL MACRO_PLACEHOLDER>;
            label = "BT_SEL";
        };

        mod_layer: mod_layer {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;

            label = "MOD_LAYER";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        morph: morph {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;

            label = "MORPH";
        };

        kp_morph: kp_morph {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "KP_MORPH";
        };
    };

    combos {
        compatible = "zmk,combos";

        // Layers

        Toggle_Qwerty {
            bindings = <&tog 1>;
            key-positions = <13 0>;
            timeout-ms = <100>;
            layers = <0 1>;
        };

        Toggle_SYM_NUM {
            bindings = <&tog 4>;
            key-positions = <27 12>;
            timeout-ms = <100>;
            layers = <0 1 3>;
        };

        MO_SYM_NUM {
            bindings = <&mo 4>;
            key-positions = <33 32>;
            timeout-ms = <100>;
            layers = <0 1 3>;
            slow-release;
        };

        // Functions

        DobleSHIFT {
            bindings = <&caps_word>;
            key-positions = <43 46>;
            timeout-ms = <150>;
            layers = <0 1>;
        };

        BT_1 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <14 1>;
            layers = <3>;
            timeout-ms = <100>;
        };

        BT_2 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <15 2>;
            layers = <3>;
            timeout-ms = <100>;
        };

        BT_3 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <16 3>;
            layers = <3>;
            timeout-ms = <100>;
        };

        BT_4 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <17 4>;
            layers = <3>;
            timeout-ms = <100>;
        };

        BT_5 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <18 5>;
            layers = <3>;
            timeout-ms = <100>;
        };

        BtCLR {
            bindings = <&bt BT_CLR>;
            key-positions = <18 17 16>;
            layers = <3>;
            timeout-ms = <100>;
        };

        // Combos

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <41 40>;
            timeout-ms = <100>;
        };

        L_BSPC {
            bindings = <&kp BSPC>;
            key-positions = <5 4>;
            timeout-ms = <100>;
        };

        L_DEL {
            bindings = <&kp DEL>;
            key-positions = <0 1>;
            timeout-ms = <100>;
        };

        R_DEL {
            bindings = <&kp DEL>;
            key-positions = <12 11>;
            timeout-ms = <100>;
        };

        R_ESC {
            bindings = <&kp ESC>;
            key-positions = <7 8>;
            timeout-ms = <100>;
        };

        PAR {
            bindings = <&shortcut ES_LPAR ES_RPAR>;
            key-positions = <36 23>;
            layers = <0 4>;
            timeout-ms = <65>;
        };

        QST {
            bindings = <&shortcut ES_INVERTED_QUESTION ES_QUESTION>;
            key-positions = <33 17>;
            layers = <0 4>;
            timeout-ms = <65>;
        };

        CTRL+ALT_FN {
            bindings = <&mod_layer 3 LC(LEFT_ALT)>;
            key-positions = <28 42>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Alpha_Ctm {
            display-name = "ROCORN";
            bindings = <
&lt_hold 5 ESC  &shortcut LC(Y) Y  &kp W              &shortcut LC(F) F  &kp P              &kp G                                        &kp UP                         &kp J                  &kp L                  &tilde_kp I I             &tilde_kp U U           &shortcut ES_AT Q  &kp BACKSPACE
&mt LWIN TAB    &kp H              &tilde_kp A A      &hrm LGUI R        &shortcut LC(T) T  &shortcut LC(V) V                  &kp LEFT  &shortcut END HOME  &kp RIGHT  &shortcut LG(LS(S)) S  &hrm LEFT_ALT N        &tilde_kp E E             &hrm RCTRL D            &tilde_kp O O      &lt 2 ES_STAR
&kp LALT        &shortcut LC(Z) Z  &shortcut LC(X) X  &kp K              &shortcut LC(C) C  &lt 5 B            &kp CAPSLOCK              &kp DOWN                       &kp ES_N_TILDE         &shortcut C_AL_MAIL M  &shortcut ES_LT ES_COMMA  &shortcut ES_GT ES_DOT  &kp ES_MINUS       &mo 3
                                                      &kp LCTRL          &mt LSHIFT TAB     &lt_hold 3 ENTER                                                            &lt 4 SPACE            &mt RSHIFT TAB         &lt 3 DEL
            >;

            sensor-bindings = <&inc_dec_kp LS(RIGHT) LS(LEFT)>;
            label = "ROCORN";
        };

        QWERTY {
            display-name = "QWERTY";
            bindings = <
&trans  &shortcut ES_AT_SIGN Q  &kp W                  &tilde_kp E E      &kp R              &shortcut LC(T) T                            &kp UP                         &shortcut LC(Y) Y  &tilde_kp U U          &tilde_kp I I          &tilde_kp O O           &kp P           &trans
&trans  &tilde_kp A A           &shortcut LS(LG(S)) S  &hrm LGUI D        &shortcut LC(F) F  &kp G                              &kp LEFT  &shortcut END HOME  &kp RIGHT  &kp H              &hrm LEFT_ALT J        &hrm RGUI K            &hrm RCTRL L            &kp ES_N_TILDE  &trans
&trans  &shortcut LC(Z) Z       &shortcut LC(X) X      &shortcut LC(C) C  &shortcut LC(V) V  &kp B              &kp CAPSLOCK              &kp DOWN                       &kp N              &shortcut C_AL_MAIL M  &shortcut ES_LT COMMA  &shortcut ES_GT ES_DOT  &kp ES_MINUS    &trans
                                                       &trans             &trans             &trans                                                                      &trans             &trans                 &trans
            >;
        };

        Mouse {
            display-name = "MOUSE";
            bindings = <
&trans  &kp F13  &kp F14  &kp F15  &kp F16  &kp F17                        &none            &kp K_MUTE         &msc SCRL_LEFT  &mmv MOVE_UP      &msc SCRL_RIGHT  &msc SCRL_UP    &trans
&trans  &kp F18  &kp F19  &kp F20  &kp F21  &kp F22              &mkp MB4  &none  &mkp MB5  &kp K_VOLUME_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_RIGHT  &msc SCRL_DOWN  &trans
&trans  &none    &none    &none    &kp F23  &kp F24    &trans              &none            &kp K_VOLUME_DOWN  &kp K_PREVIOUS  &kp K_PLAY_PAUSE  &kp K_NEXT       &none           &trans
                          &trans   &trans   &mkp RCLK                                       &mkp LCLK          &mkp MCLK       &trans
            >;

            sensor-bindings = <&inc_dec_kp K_VOLUME_UP K_VOLUME_DOWN>;
        };

        Fn {
            display-name = "Fn";
            bindings = <
&kp K_APP  &shortcut LA(LC(F1)) F1  &shortcut LC(LA(F2)) F2  &shortcut LC(LA(F3)) F3  &shortcut LC(LA(F4)) F4  &kp F5                                 &rgb_ug RGB_BRI                   &kp C_MUTE         &kp HOME                       &kp UP            &kp END                          &kp PAGE_UP    &hrm RCTRL BACKSPACE
&trans     &kp F6                   &hrm LCTRL F7            &hrm LEFT_GUI F8         &hrm LEFT_ALT F9         &kp F10               &rgb_ug RGB_EFR  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &kp C_VOLUME_UP    &kp LEFT                       &kp DOWN          &kp RIGHT                        &kp PAGE_DOWN  &kp RIGHT_WIN
&trans     &bootloader              &out OUT_TOG             &out OUT_TOG             &kp F11                  &kp F12  &soft_off                     &rgb_ug RGB_BRD                   &kp C_VOLUME_DOWN  &shortcut C_REWIND C_PREVIOUS  &kp C_PLAY_PAUSE  &shortcut C_FAST_FORWARD C_NEXT  &bootloader    &hrm RSHIFT ENTER
                                                             &trans                   &trans                   &trans                                                                   &kp ENTER          &trans                         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Symbol+Number {
            display-name = "SYM_NUM";
            bindings = <
&trans  &shortcut ES_IEXCL ES_EXCL  &shortcut ES_SQT ES_DQT     &kp ES_HASH                 &kp ES_DLLR                 &kp ES_PRCNT                                        &kp C_RW              &kp KP_DIVIDE                &kp ES_N7                &kp ES_N8                 &kp ES_N9  &kp KP_MINUS               &Back_Del
&trans  &kp ES_AMPS                 &shortcut ES_BSLH ES_SLASH  &shortcut ES_LBRC ES_LPAR   &shortcut ES_RBRC ES_RPAR   &kp ES_EQUAL                            &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp KP_MULTIPLY              &kp ES_N4                &kp ES_N5                 &kp ES_N6  &kp KP_PLUS                &kp C_AL_CALC
&trans  &shortcut ES_DEG ES_PIPE    &shortcut ES_TILDE ES_NOT   &shortcut ES_CARET ES_LBKT  &shortcut ES_GRAVE ES_RBKT  &shortcut ES_IQMARK ES_QMARK  &trans                &kp C_FF              &shortcut X N0               &kp ES_N1                &kp ES_N2                 &kp ES_N3  &shortcut ES_COLON KP_DOT  &shortcut ES_EQUAL KP_ENTER
                                                                &trans                      &trans                      &trans                                                                    &shortcut ES_EQUAL KP_ENTER  &shortcut ES_HASH ES_N0  &shortcut ES_PERCENT DOT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Num_Alt {
            bindings = <
&trans  &shortcut ES_EXCL ES_SLASH  &shortcut ES_DQT N7    &shortcut ES_HASH N8  &shortcut ES_DLLR N9  &shortcut ES_PRCNT ES_MINUS                                   &trans          &kp C_MUTE    &kp HOME        &kp UP            &kp END     &kp PAGE_UP    &kp BSPC
&trans  &shortcut ES_AMPS ES_STAR   &shortcut ES_SLASH N4  &shortcut ES_LPAR N5  &shortcut ES_RPAR N6  &shortcut ES_EQUAL ES_PLUS                            &trans  &trans  &trans  &kp C_VOL_UP  &kp LEFT        &kp DOWN          &kp RIGHT   &kp PAGE_DOWN  &kp RIGHT_GUI
&trans  &kp ES_GRAVE                &kp N1                 &kp N2                &kp N3                &shortcut ES_INVERTED_QUESTION ES_QUESTION  &trans            &trans          &kp C_VOL_DN  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &trans         &kp RET
                                                           &kp N0                &kp DOT               &kp ENTER                                                                     &kp RET       &trans          &trans
            >;

            label = "Num_FN";
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
