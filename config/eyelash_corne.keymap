#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>

/* #include "keys_es_latin_american.h" */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#ifndef KEYMAP_DRAWER

#include "keys_es_latin_american.h"

#

endif {
    /

    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;       // 0
    time-to-max-speed-ms = <0>;        // 300
    delay-ms = <0>;                    // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
};

&sk { quick-release; };

&mt { tapping-term-ms = <150>; };

/ {
    behaviors {
        bt_encoder: bt_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&bt BT_NXT>, <&bt BT_PRV>;

            tap-ms = <20>;
        };

        hue_encoder: hue_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
        };

        sat_encoder: sat_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_SAI>, <&rgb_ug RGB_SAD>;
        };

        bright_encoder: bright_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <30>;
        };

        as_ht: autoshift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        cw_mod: caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "Caps Word EXCLUSIONS";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            continue-list = <SPACE LCTRL RSHIFT LSHIFT COMMA SLASH LBRC RBRC APOS NUHS NUBS SEMI SINGLE_QUOTE FSLH LEFT RIGHT UP DOWN BSPC KP_N1 KP_N2 KP_N3 KP_N4 KP_N5 KP_N6 KP_N7 KP_N8 KP_N9 KP_N0 KP_SUBTRACT KP_DIVIDE KP_PLUS KP_ASTERISK HOME LBKT DEL>;
        };

        td_caps: td_caps {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&cw_mod>, <&kp CAPS>;

            label = "Enter / CapsWord / Mayusc.";
        };

        hrm: home_row {
            compatible = "zmk,behavior-hold-tap";
            label = "home_row";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        shortcut: shortcut {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&oneshot>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <350>;
            label = "Oneshot shortcut";
        };

        lt_hold: lt_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "&mo(hold)";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            require-prior-idle-ms = <1>;
        };

        tilde_kp: tilde_kp {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&tilde>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <350>;
            label = "TILDE_KP";
        };

        kp_bt: kp_bt {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_BT";
            bindings = <&bt_sel>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        Back_Del: Back_Del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACK_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        mt_sk: mt_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SK";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        oneshot: one_shot {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &rgb_ug RGB_TOG &rgb_ug RGB_EFF>,
                <&macro_wait_time 50>,
                <&rgb_ug RGB_EFR &rgb_ug RGB_TOG>,
                <&macro_release>;

            label = "one_shot";
        };

        tilde: tilde_a {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp ES_ACUTE>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "TILDE_A";
        };

        bt_sel: bt_sel {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to2 &bt BT_SEL MACRO_PLACEHOLDER>;
            label = "BT_SEL";
        };
    };

    combos {
        compatible = "zmk,combos";

        // Layers

        Toggle_Qwerty {
            bindings = <&tog 1>;
            key-positions = <13 0>;
            timeout-ms = <100>;
            layers = <0 1>;
        };

        Toggle_SYM_NUM {
            bindings = <&tog 4>;
            key-positions = <27 12>;
            timeout-ms = <100>;
            layers = <0 1 3>;
        };

        // Functions

        DobleSHIFT {
            bindings = <&caps_word>;
            key-positions = <43 46>;
            timeout-ms = <150>;
            layers = <0 1>;
        };

        BtCLR {
            bindings = <&bt BT_CLR>;
            key-positions = <18 17 16>;
            layers = <3>;
            timeout-ms = <100>;
        };

        // Combos

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <41 40>;
            timeout-ms = <100>;
        };

        L_BSPC {
            bindings = <&kp BSPC>;
            key-positions = <5 4>;
            timeout-ms = <100>;
        };

        L_DEL {
            bindings = <&kp DEL>;
            key-positions = <0 1>;
            timeout-ms = <100>;
        };

        R_DEL {
            bindings = <&kp DEL>;
            key-positions = <12 11>;
            timeout-ms = <100>;
        };

        R_ESC {
            bindings = <&kp ESC>;
            key-positions = <7 8>;
            timeout-ms = <100>;
        };

        L_PAR {
            bindings = <&kp ES_LPAR>;
            key-positions = <7 23>;
            layers = <0 1 3>;
            timeout-ms = <65>;
        };

        R_PAR {
            bindings = <&kp ES_RPAR>;
            key-positions = <22 8>;
            layers = <0 1 3>;
            timeout-ms = <65>;
        };

        R_IQST {
            bindings = <&kp ES_INVERTED_QUESTION>;
            key-positions = <16 4>;
            layers = <0 1 3>;
            timeout-ms = <65>;
        };

        R_QST {
            bindings = <&kp ES_QUESTION>;
            key-positions = <17 3>;
            layers = <0 1 3>;
            timeout-ms = <65>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Alpha_Ctm {
            display-name = "ROCORN";
            bindings = <
&kp ESC       &shortcut LC(Y) Y  &kp W              &shortcut LC(F) F  &kp P              &kp G                                        &kp UP                         &kp J                  &kp L                  &tilde_kp I I             &tilde_kp U U           &shortcut ES_AT Q  &kp BACKSPACE
&mt LWIN TAB  &kp H              &tilde_kp A A      &hrm LGUI R        &shortcut LC(T) T  &shortcut LC(V) V                  &kp LEFT  &shortcut END HOME  &kp RIGHT  &shortcut LG(LS(S)) S  &hrm LEFT_ALT N        &tilde_kp E E             &hrm RCTRL D            &tilde_kp O O      &lt 2 ES_STAR
&kp LALT      &shortcut LC(Z) Z  &shortcut LC(X) X  &kp K              &shortcut LC(C) C  &kp B              &kp CAPSLOCK              &kp DOWN                       &kp ES_N_TILDE         &shortcut C_AL_MAIL M  &shortcut ES_LT ES_COMMA  &shortcut ES_GT ES_DOT  &kp ES_MINUS       &mo 3
                                                    &kp LCTRL          &mt LSHIFT TAB     &lt_hold 3 ENTER                                                            &lt 4 SPACE            &mt RSHIFT TAB         &lt 3 DEL
            >;

            sensor-bindings = <&inc_dec_kp LS(RIGHT) LS(LEFT)>;
            label = "ROCORN";
        };

        QWERTY {
            display-name = "QWERTY";
            bindings = <
&trans  &shortcut ES_AT_SIGN Q  &kp W                  &tilde_kp E E      &kp R              &shortcut LC(T) T                            &kp UP                         &shortcut LC(Y) Y  &tilde_kp U U          &tilde_kp I I          &tilde_kp O O           &kp P           &trans
&trans  &tilde_kp A A           &shortcut LS(LG(S)) S  &hrm LGUI D        &shortcut LC(F) F  &kp G                              &kp LEFT  &shortcut END HOME  &kp RIGHT  &kp H              &hrm LEFT_ALT J        &hrm RGUI K            &hrm RCTRL L            &kp ES_N_TILDE  &trans
&trans  &shortcut LC(Z) Z       &shortcut LC(X) X      &shortcut LC(C) C  &shortcut LC(V) V  &kp B              &kp CAPSLOCK              &kp DOWN                       &kp N              &shortcut C_AL_MAIL M  &shortcut ES_LT COMMA  &shortcut ES_GT ES_DOT  &kp ES_MINUS    &trans
                                                       &trans             &trans             &trans                                                                      &trans             &trans                 &trans
            >;
        };

        Mouse {
            display-name = "MOUSE";
            bindings = <
&trans  &kp F13  &kp F14  &kp F15  &kp F16  &kp F17                       &none            &kp K_MUTE2         &msc SCRL_LEFT                 &mmv MOVE_UP      &msc SCRL_RIGHT                  &msc SCRL_UP    &trans
&trans  &kp F18  &kp F19  &kp F20  &kp F21  &kp F22             &mkp MB4  &none  &mkp MB5  &kp K_VOLUME_UP2    &mmv MOVE_LEFT                 &mmv MOVE_DOWN    &mmv MOVE_RIGHT                  &msc SCRL_DOWN  &trans
&trans  &none    &none    &none    &kp F23  &kp F24    &none              &none            &kp K_VOLUME_DOWN2  &shortcut C_REWIND K_PREVIOUS  &kp K_PLAY_PAUSE  &shortcut C_FAST_FORWARD K_NEXT  &none           &trans
                          &trans   &none    &mkp RCLK                                      &mkp LCLK           &mkp MCLK                      &none
            >;

            sensor-bindings = <&inc_dec_kp K_VOL_UP K_VOL_DN>;
        };

        Fn {
            display-name = "Fn";
            bindings = <
&kp K_APP  &shortcut LA(LC(F1)) F1  &shortcut LC(LA(F2)) F2  &shortcut LC(LA(F3)) F3  &shortcut LC(LA(F4)) F4  &kp F5                                      &rgb_ug RGB_BRI                   &kp C_MUTE         &kp HOME                       &kp UP            &kp END                          &kp PAGE_UP    &hrm RCTRL BACKSPACE
&trans     &kp_bt 0 F6              &kp_bt 1 F7              &kp_bt 2 F8              &kp_bt 3 F9              &kp_bt 4 F10               &rgb_ug RGB_EFR  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &kp C_VOLUME_UP    &kp LEFT                       &kp DOWN          &kp RIGHT                        &kp PAGE_DOWN  &kp RIGHT_WIN
&trans     &bootloader              &out OUT_TOG             &out OUT_TOG             &kp F11                  &kp F12       &soft_off                     &rgb_ug RGB_BRD                   &kp C_VOLUME_DOWN  &shortcut C_REWIND C_PREVIOUS  &kp C_PLAY_PAUSE  &shortcut C_FAST_FORWARD C_NEXT  &bootloader    &hrm RSHIFT ENTER
                                                             &trans                   &trans                   &trans                                                                        &kp ENTER          &trans                         &trans
            >;

            sensor-bindings = <&hue_encoder>;
        };

        Symbol+Number {
            display-name = "SYM_NUM";
            bindings = <
&trans  &shortcut ES_IEXCL ES_EXCL  &shortcut ES_SQT ES_DQT     &kp ES_HASH                &kp ES_DLLR                &kp ES_PRCNT                                        &kp C_RW              &kp KP_PLUS                  &kp ES_N7                &kp ES_N8                 &kp ES_N9  &kp KP_MINUS               &Back_Del
&trans  &kp ES_AMPS                 &shortcut ES_BSLH ES_SLASH  &shortcut ES_LBRC ES_LPAR  &shortcut ES_RBRC ES_RPAR  &kp ES_EQUAL                            &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp KP_MULTIPLY              &kp ES_N4                &kp ES_N5                 &kp ES_N6  &kp KP_DIVIDE              &kp C_AL_CALC
&trans  &shortcut ES_DEG ES_PIPE    &shortcut ES_TILDE ES_NOT   &kp ES_LBKT                &kp ES_RBKT                &shortcut ES_IQMARK ES_QMARK  &trans                &kp C_FF              &kp ES_N0                    &kp ES_N1                &kp ES_N2                 &kp ES_N3  &shortcut ES_COLON KP_DOT  &shortcut ES_EQUAL KP_ENTER
                                                                &trans                     &trans                     &trans                                                                    &shortcut ES_EQUAL KP_ENTER  &shortcut ES_HASH ES_N0  &shortcut ES_PERCENT DOT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Empty {
            display-name = "EMPTY";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };
    };

    //    underglow-layer {
    //        compatible = "zmk,underglow-layer";
    //
    //        Default {
    //            layer = <0>;
    //            effect = <3>;  // 3 es generalmente el efecto rainbow
    //        };
    //
    //        Number {
    //            layer = <2>;
    //            color = <RGB_COLOR_HSB(240, 100, 100)>;  // Azul
    //       };
    //
    //        Symbol {
    //            layer = <3>;
    //            color = <RGB_COLOR_HSB(270, 100, 100)>;  // Morado
    //        };
    //
    //        layer_3 {
    //            layer = <4>;
    //            color = <RGB_COLOR_HSB(0, 100, 100)>;    // Rojo
    //        };
    //
    //        caps_word {
    //            caps-word;
    //            color = <RGB_COLOR_HSB(30, 100, 100)>;   // Naranja
    //        };
    //    };
};
