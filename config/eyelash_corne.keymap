#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 140    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 1 2>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <10>;       // 0
    time-to-max-speed-ms = <100>;       // 300
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        bt_encoder: bt_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&bt BT_NXT>, <&bt BT_PRV>;

            tap-ms = <30>;
        };

        hue_encoder: hue_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
        };

        sat_encoder: sat_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_SAI>, <&rgb_ug RGB_SAD>;
        };

        bright_encoder: bright_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
        };

        as_ht: autoshift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        cw_mod: caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "Caps Word EXCLUSIONS";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            continue-list = <SPACE LCTRL RSHIFT LSHIFT COMMA SLASH LBRC RBRC APOS NUHS NUBS SEMI SINGLE_QUOTE FSLH LEFT RIGHT UP DOWN BSPC KP_N1 KP_N2 KP_N3 KP_N4 KP_N5 KP_N6 KP_N7 KP_N8 KP_N9 KP_N0 KP_SUBTRACT KP_DIVIDE KP_PLUS KP_ASTERISK HOME LBKT DEL>;
        };

        td_caps: td_caps {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&cw_mod>, <&none>, <&kp CAPSLOCK>;

            label = "Shift / CapsWord / Mayusc.";
        };

        hrm: home_row {
            compatible = "zmk,behavior-hold-tap";
            label = "home_row";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
        };

        shortcut: shortcut {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&oneshot>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            label = "Oneshot shortcut";
        };

        td_alt: td_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "Alt+Symbol";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_ALT>, <&tog 3>;
        };

        td_gui: td_gui {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI+Symb";
            #binding-cells = <0>;
            bindings = <&kp LGUI>, <&tog 3>;
        };

        td_ctrl: td_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL+Numb";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&tog 2>;
        };

        tk_hold: tk_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TogKey_Hold-preferred";
            bindings = <&kp>, <&tog>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <220>;
        };

        kt_hold: kt_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "KeyTog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <220>;
            bindings = <&sl>, <&kp>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        oneshot: one_shot {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &rgb_ug RGB_TOG &rgb_ug RGB_EFF &rgb_ug RGB_EFR &rgb_ug RGB_TOG>,
                <&macro_release>;

            label = "one_shot";
        };
    };

    combos {
        compatible = "zmk,combos";

        Togle_Colemak {
            bindings = <&tog 1>;
            key-positions = <0 13>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            display-name = "QWERTY";
            bindings = <
&kt_hold 2 ESC  &kp Q              &kp W              &kp E              &kp R              &shortcut LC(T) T                            &kp UP                         &shortcut LC(Y) Y  &kp U                  &kp I                 &kp O                   &shortcut LS(LG(S)) P  &kp BACKSPACE
&kt_hold 3 TAB  &kp A              &hrm LS(LG(S)) S   &kp D              &shortcut LC(F) F  &kp G                              &kp LEFT  &shortcut END HOME  &kp RIGHT  &kp H              &hrm LEFT_ALT J        &hrm RCTRL K          &kp L                   &kp SEMI               &shortcut KP_ASTERISK LBKT
&td_caps        &shortcut LC(Z) Z  &shortcut LC(X) X  &shortcut LC(C) C  &shortcut LC(V) V  &kp B              &kp CAPSLOCK              &kp DOWN                       &kp N              &shortcut C_AL_MAIL M  &shortcut NUBS COMMA  &shortcut LS(NUBS) DOT  &kp FSLH               &mt RSHIFT ENTER
                                                      &td_ctrl           &td_gui            &kt_hold 4 SPACE                                                            &lt 4 SPACE        &td_alt                &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp LS(RIGHT) LS(LEFT)>;
        };

        Alpha_Alt {
            display-name = "COLEMAK";
            bindings = <
&kt_hold 2 ESC  &kp Q              &kp W              &kp F              &kp P              &kp G                                       &kp UP                         &kp J        &kp L                  &kp U                 &kp Y                   &kp SEMI  &kp BACKSPACE
&kt_hold 3 TAB  &kp A              &kp R              &hrm LS(LG(S)) S   &shortcut LC(T) T  &kp D                             &kp LEFT  &shortcut END HOME  &kp RIGHT  &kp H        &hrm LEFT_ALT N        &hrm RCTRL E          &kp I                   &kp O     &shortcut KP_ASTERISK LBKT
&td_caps        &shortcut LC(Z) Z  &shortcut LC(X) X  &shortcut LC(C) C  &shortcut LC(V) V  &kp B             &kp CAPSLOCK              &kp DOWN                       &kp K        &shortcut C_AL_MAIL M  &shortcut NUBS COMMA  &shortcut LS(NUBS) DOT  &kp FSLH  &mt RSHIFT ENTER
                                                      &td_ctrl           &td_gui            &kt_hold 4 SPACE                                                           &lt 4 SPACE  &td_alt                &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp LS(RIGHT) LS(LEFT)>;
        };

        Number {
            display-name = "NUMBER";
            bindings = <
&tog 2  &as N1      &as N2      &as N3      &as N4      &as N5                                &mmv MOVE_UP                     &kp KP_N7             &kp KP_N8        &kp KP_N9          &kp KP_SUBTRACT             &kp KP_PLUS      &hrm DEL BACKSPACE
&trans  &as N6      &as N7      &as N8      &as N9      &as N0                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp KP_N4             &kp KP_N5        &kp KP_N6          &kp KP_DIVIDE               &kp KP_ASTERISK  &shortcut K_CALC KP_NUMLOCK
&trans  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)  &kp LS(N8)  &kp LS(N9)  &trans                    &mmv MOVE_DOWN                   &kp KP_N1             &kp KP_N2        &kp KP_N3          &shortcut LS(NUBS) LS(DOT)  &trans           &kp KP_ENTER
                                &trans      &trans      &tog 2                                                                 &hrm LS(N0) KP_ENTER  &hrm HASH KP_N0  &hrm PRCNT KP_DOT
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        Symbol {
            display-name = "SYMBOL";
            bindings = <
&tog 3  &shortcut PLUS EXCL  &kp AT         &kp HASH  &kp DLLR      &kp PRCNT                                       &trans                           &kp CARET  &kp AMPS       &kp STAR      &kp LPAR      &kp UNDER          &kp EQUAL
&trans  &kp CARET            &kp AMPS       &kp STAR  &kp LPAR      &kp RPAR                 &shortcut C_RW C_PREV  &kp C_PP  &shortcut C_FF C_NEXT  &kp PRCNT  &kp RA(MINUS)  &kp APOS      &kp NUHS      &as RIGHT_BRACKET  &as GRAVE
&trans  &none                &kp RA(MINUS)  &kp NUBS  &kp LS(NUBS)  &none      &kp C_MUTE                           &trans                           &kp DLLR   &kp RA(GRAVE)  &kp LS(APOS)  &kp LS(NUHS)  &trans             &trans
                                            &trans    &trans        &tog 3                                                                           &trans     &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Fn {
            display-name = "Fn";
            bindings = <
&tog 4       &shortcut LA(LC(F1)) F1  &shortcut LC(LA(F2)) F2  &shortcut LC(LA(F3)) F3  &shortcut LC(LA(F4)) F4  &kp F5                                      &rgb_ug RGB_BRI                   &kp F6      &kp F7        &kp F8  &kp F9  &kp F10  &kp F11
&trans       &bt BT_SEL 0             &bt BT_SEL 1             &bt BT_SEL 2             &bt BT_SEL 3             &bt BT_SEL 4               &rgb_ug RGB_EFR  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &none       &none         &none   &none   &none    &kp F12
&bootloader  &out OUT_USB             &out OUT_BLE             &none                    &none                    &sys_reset    &soft_off                     &rgb_ug RGB_BRD                   &sys_reset  &none         &none   &none   &none    &bootloader
                                                               &none                    &none                    &tog 4                                                                        &none       &kp LEFT_ALT  &none
            >;

            sensor-bindings = <&hue_encoder>;
        };
    };

    underglow-layer {
        compatible = "zmk,underglow-layer";

        Default {
            layer = <0>;
            effect = <3>;  // 3 es generalmente el efecto rainbow
        };

        Number {
            layer = <2>;
            color = <RGB_COLOR_HSB(240, 100, 100)>;  // Azul
        };

        Symbol {
            layer = <3>;
            color = <RGB_COLOR_HSB(270, 100, 100)>;  // Morado
        };

        layer_3 {
            layer = <4>;
            color = <RGB_COLOR_HSB(0, 100, 100)>;    // Rojo
        };

        caps_word {
            caps-word;
            color = <RGB_COLOR_HSB(30, 100, 100)>;   // Naranja
        };
    };
};
